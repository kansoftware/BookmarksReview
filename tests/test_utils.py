"""
–ú–æ–¥—É–ª—å test_utils.py
–°–æ–¥–µ—Ä–∂–∏—Ç unit-—Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –∏–∑ –º–æ–¥—É–ª—è src/utils.py.
"""
import pytest
import tempfile
import time
import asyncio
from pathlib import Path
from datetime import datetime
from unittest.mock import patch, MagicMock

from src.utils import (
    PathUtils, TextUtils, DateUtils, ValidationUtils, 
    ErrorUtils, HashUtils, ProgressTracker
)


class TestPathUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏."""
    
    def test_ensure_dir_creates_directory(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        with tempfile.TemporaryDirectory() as temp_dir:
            test_path = Path(temp_dir) / "new_dir" / "sub_dir"
            result = PathUtils.ensure_dir(test_path)
            
            assert result.exists()
            assert result.is_dir()
            assert result == test_path
    
    def test_ensure_dir_existing_directory(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π."""
        with tempfile.TemporaryDirectory() as temp_dir:
            existing_path = Path(temp_dir)
            result = PathUtils.ensure_dir(existing_path)
            
            assert result.exists()
            assert result == existing_path
    
    def test_safe_filename_removes_invalid_chars(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        invalid_name = 'file<>:"/\\|?*name'
        result = PathUtils.safe_filename(invalid_name)
        
        assert '<' not in result
        assert '>' not in result
        assert ':' not in result
        assert '"' not in result
        assert '/' not in result
        assert '\\' not in result
        assert '|' not in result
        assert '?' not in result
        assert '*' not in result
    
    def test_safe_filename_normalizes_whitespace(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        name_with_spaces = 'file    name   with   spaces'
        result = PathUtils.safe_filename(name_with_spaces)
        
        assert result == 'file name with spaces'
    
    def test_safe_filename_limits_length(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        long_name = 'a' * 300
        result = PathUtils.safe_filename(long_name)
        
        assert len(result) <= 255
    
    def test_safe_filename_empty_result(self):
        """–¢ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."""
        invalid_name = '<>:"/\\|?*'
        result = PathUtils.safe_filename(invalid_name)
        
        assert result == "unnamed"
    def test_safe_filename_utf8_characters(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        utf8_name = "—Ñ–∞–π–ª_—Å_–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π_Âíå_—Å–º–∞–π–ª–∏–∫–∞–º–∏_üòÄüéâ.txt"
        result = PathUtils.safe_filename(utf8_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        assert result == utf8_name  # –í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã
    
    def test_safe_filename_utf8_multibyte_length_limit(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –¥–ª—è –º–Ω–æ–≥–æ –±–∞–π—Ç–æ–≤—ã—Ö UTF-8 —Å–∏–º–≤–æ–ª–æ–≤."""
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤ UTF-8 –ø—Ä–µ–≤—ã—à–∞–µ—Ç 255 –±–∞–π—Ç
        utf8_char = "üòÄ"  # –≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª –∑–∞–Ω–∏–º–∞–µ—Ç 4 –±–∞–π—Ç–∞ –≤ UTF-8
        long_utf8_name = utf8_char * 100  # 400 –±–∞–π—Ç –≤ UTF-8
        result = PathUtils.safe_filename(long_utf8_name)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 255 –±–∞–π—Ç–∞–º–∏
        assert len(result.encode('utf-8')) <= 255
        
    def test_safe_filename_mixed_utf8_characters(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö UTF-8 —Å–∏–º–≤–æ–ª–æ–≤."""
        mixed_name = "file_—Å_–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π_and_emoji_üåç_test.txt"
        result = PathUtils.safe_filename(mixed_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        assert result == mixed_name # –í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã
    
    def test_get_relative_path(self):
        """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏."""
        base = Path("/home/user/documents")
        target = Path("/home/user/documents/projects/test")
        result = PathUtils.get_relative_path(target, base)
        
        assert str(result) == "projects/test"
    
    def test_get_relative_path_not_relative(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫ –±–∞–∑–µ."""
        base = Path("/home/user/documents")
        target = Path("/etc/config")
        result = PathUtils.get_relative_path(target, base)
        
        assert result == target


class TestTextUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."""
    
    def test_clean_text_removes_extra_whitespace(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤."""
        dirty_text = "  Text   with   extra   \n   whitespace  "
        result = TextUtils.clean_text(dirty_text)
        
        assert result == "Text with extra whitespace"
    
    def test_clean_text_empty_string(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏."""
        result = TextUtils.clean_text("")
        
        assert result == ""
    
    def test_clean_text_none(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ None."""
        result = TextUtils.clean_text(None)
        
        assert result == ""
    
    def test_truncate_text_shorter_than_limit(self):
        """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–æ—á–µ –ª–∏–º–∏—Ç–∞."""
        text = "Short text"
        result = TextUtils.truncate_text(text, 20)
        
        assert result == "Short text"
    
    def test_truncate_text_longer_than_limit(self):
        """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞."""
        text = "This is a very long text that should be truncated"
        result = TextUtils.truncate_text(text, 20)
        
        assert len(result) <= 20
        assert result.endswith("...")
    
    def test_extract_domain_valid_url(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL."""
        url = "https://www.example.com/path/to/page"
        result = TextUtils.extract_domain(url)
        
        assert result == "www.example.com"
    
    def test_extract_domain_invalid_url(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL."""
        url = "not-a-valid-url"
        result = TextUtils.extract_domain(url)
        
        assert result is None
    
    def test_normalize_whitespace(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        text = "Text   with\t\n   multiple   whitespace"
        result = TextUtils.normalize_whitespace(text)
        
        assert result == "Text with multiple whitespace"


class TestDateUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏."""
    
    def test_chrome_timestamp_to_datetime_valid(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ Chrome."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        chrome_timestamp = "13284263264000000"  # –ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        result = DateUtils.chrome_timestamp_to_datetime(chrome_timestamp)
        
        assert isinstance(result, datetime)
    
    def test_chrome_timestamp_to_datetime_invalid(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏."""
        invalid_timestamp = "not-a-timestamp"
        result = DateUtils.chrome_timestamp_to_datetime(invalid_timestamp)
        
        assert result is None
    
    def test_format_duration_seconds(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        result = DateUtils.format_duration(30.5)
        
        assert "30.5 —Å–µ–∫" in result
    
    def test_format_duration_minutes(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö."""
        result = DateUtils.format_duration(150)
        
        assert "2.5 –º–∏–Ω" in result
    
    def test_format_duration_hours(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö."""
        result = DateUtils.format_duration(7200)
        
        assert "2.0 —á–∞—Å" in result
    
    def test_now_iso(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ."""
        result = DateUtils.now_iso()
        
        assert isinstance(result, str)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ISO (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'T' –∏ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π)
        assert 'T' in result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ ISO –¥–∞—Ç—É
        datetime.fromisoformat(result)


class TestValidationUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    
    def test_is_valid_url_http(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTTP URL."""
        url = "http://example.com"
        result = ValidationUtils.is_valid_url(url)
        
        assert result is True
    
    def test_is_valid_url_https(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HTTPS URL."""
        url = "https://example.com"
        result = ValidationUtils.is_valid_url(url)
        
        assert result is True
    
    def test_is_valid_url_invalid_scheme(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ö–µ–º–æ–π."""
        url = "ftp://example.com"
        result = ValidationUtils.is_valid_url(url)
        
        assert result is False
    
    def test_is_valid_url_no_scheme(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL –±–µ–∑ —Å—Ö–µ–º—ã."""
        url = "example.com"
        result = ValidationUtils.is_valid_url(url)
        
        assert result is False
    
    def test_validate_json_structure_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
        data = {"key1": "value1", "key2": "value2"}
        required_keys = ["key1", "key2"]
        result = ValidationUtils.validate_json_structure(data, required_keys)
        
        assert result is True
    
    def test_validate_json_structure_missing_key(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º."""
        data = {"key1": "value1"}
        required_keys = ["key1", "key2"]
        result = ValidationUtils.validate_json_structure(data, required_keys)
        
        assert result is False
    
    def test_validate_json_structure_not_dict(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ-—Å–ª–æ–≤–∞—Ä—è."""
        data = "not a dict"
        required_keys = ["key1"]
        result = ValidationUtils.validate_json_structure(data, required_keys)
        
        assert result is False
    
    def test_is_safe_path_safe(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏."""
        with tempfile.TemporaryDirectory() as temp_dir:
            base = Path(temp_dir)
            safe_path = base / "subdir" / "file.txt"
            result = ValidationUtils.is_safe_path(safe_path, base)
            
            assert result is True
    
    def test_is_safe_path_unsafe(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏."""
        base = Path("/home/user/documents")
        unsafe_path = Path("/etc/passwd")
        result = ValidationUtils.is_safe_path(unsafe_path, base)
        
        assert result is False


class TestErrorUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    def test_safe_execute_success(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        def func(x, y):
            return x + y
        
        result = ErrorUtils.safe_execute(func, default=0, log_error=False, x=2, y=3)
        
        assert result == 5
    
    def test_safe_execute_error(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π."""
        def func():
            raise ValueError("Test error")
        
        result = ErrorUtils.safe_execute(func, default="error", log_error=False)
        
        assert result == "error"
    
    @pytest.mark.asyncio
    async def test_safe_execute_async_success(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        async def async_func(x, y):
            await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            return x + y
        
        result = await ErrorUtils.safe_execute_async(async_func, default=0, log_error=False, x=2, y=3)
        
        assert result == 5
    
    @pytest.mark.asyncio
    async def test_safe_execute_async_error(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–æ–π."""
        async def async_func():
            raise ValueError("Test async error")
        
        result = await ErrorUtils.safe_execute_async(async_func, default="error", log_error=False)
        
        assert result == "error"
    
    def test_retry_with_backoff_success(self):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        call_count = 0
        
        def func():
            nonlocal call_count
            call_count += 1
            if call_count < 2:
                raise ValueError("Temporary error")
            return "success"
        
        result = ErrorUtils.retry_with_backoff(func, max_retries=3, base_delay=0.01)
        
        assert result == "success"
        assert call_count == 2
    
    def test_retry_with_backoff_failure(self):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å –Ω–µ—É–¥–∞—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        def func():
            raise ValueError("Permanent error")
        
        with pytest.raises(ValueError, match="Permanent error"):
            ErrorUtils.retry_with_backoff(func, max_retries=2, base_delay=0.01)
    
    @pytest.mark.asyncio
    async def test_retry_with_backoff_async_success(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        call_count = 0
        
        async def async_func():
            nonlocal call_count
            call_count += 1
            await asyncio.sleep(0.01)
            if call_count < 2:
                raise ValueError("Temporary async error")
            return "async success"
        
        result = await ErrorUtils.retry_with_backoff_async(
            async_func, max_retries=3, base_delay=0.01
        )
        
        assert result == "async success"
        assert call_count == 2
    
    @pytest.mark.asyncio
    async def test_retry_with_backoff_async_failure(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å –Ω–µ—É–¥–∞—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."""
        async def async_func():
            raise ValueError("Permanent async error")
        
        with pytest.raises(ValueError, match="Permanent async error"):
            await ErrorUtils.retry_with_backoff_async(
                async_func, max_retries=2, base_delay=0.01
            )


class TestHashUtils:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def test_generate_file_hash(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞."""
        with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
            f.write("test content for hashing")
            temp_path = Path(f.name)
        
        try:
            result = HashUtils.generate_file_hash(temp_path, "md5")
            
            assert isinstance(result, str)
            assert len(result) == 32  # MD5 —Ö–µ—à –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 32 —Å–∏–º–≤–æ–ª–∞
        finally:
            temp_path.unlink()
    
    def test_generate_file_hash_invalid_algorithm(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º."""
        with tempfile.NamedTemporaryFile() as f:
            temp_path = Path(f.name)
        
        with pytest.raises(ValueError, match="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"):
            HashUtils.generate_file_hash(temp_path, "invalid_algorithm")
    
    def test_generate_text_hash(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞."""
        text = "test content for hashing"
        result = HashUtils.generate_text_hash(text, "md5")
        
        assert isinstance(result, str)
        assert len(result) == 32  # MD5 —Ö–µ—à –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 32 —Å–∏–º–≤–æ–ª–∞
    
    def test_generate_text_hash_invalid_algorithm(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º."""
        with pytest.raises(ValueError, match="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"):
            HashUtils.generate_text_hash("test", "invalid_algorithm")


class TestProgressTracker:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    
    def test_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞."""
        tracker = ProgressTracker(100, "Test operation")
        
        assert tracker.total_items == 100
        assert tracker.processed_items == 0
        assert tracker.description == "Test operation"
        assert tracker.start_time > 0
    
    def test_update_progress(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        tracker = ProgressTracker(10)
        
        tracker.update(5)
        
        assert tracker.processed_items == 5
        assert tracker.get_progress_percentage() == 50.0
    
    def test_get_progress_percentage(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        tracker = ProgressTracker(200)
        
        tracker.update(50)
        
        assert tracker.get_progress_percentage() == 25.0
    
    def test_get_progress_percentage_zero_total(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –Ω—É–ª–µ–≤—ã–º –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º."""
        tracker = ProgressTracker(0)
        
        percentage = tracker.get_progress_percentage()
        
        assert percentage == 100.0
    
    def test_get_elapsed_time(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        tracker = ProgressTracker(10)
        
        time.sleep(0.1)
        elapsed = tracker.get_elapsed_time()
        
        assert elapsed >= 0.1
    
    def test_get_estimated_remaining_time(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏."""
        tracker = ProgressTracker(10)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        tracker.update(5)
        time.sleep(0.1)
        
        remaining = tracker.get_estimated_remaining_time()
        
        assert remaining is not None
        assert remaining > 0
    
    def test_get_estimated_remaining_time_no_progress(self):
        """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        tracker = ProgressTracker(10)
        
        remaining = tracker.get_estimated_remaining_time()
        
        assert remaining is None
    
    @patch('src.utils.logger')
    def test_log_progress(self, mock_logger):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        tracker = ProgressTracker(10, "Test")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞ –≤ –ø—Ä–æ—à–ª–æ–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        tracker.last_log_time = 0
        tracker.update(5, "test item")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ logger.info –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_logger.info.assert_called()